# indent w/ 2 spaces
source: |
  def test_array_1(mutable array[uint[16], 4, 2] a) {}
  def test_array_2(const array[uint[16], 4, 2] a) {}
  def test_array_3(mutable array[uint[16], #dim=2] a) {}
  def test_array_4(const array[uint[16], #dim=2*n] a) {}
  def test_array_5(const array[int[8], #dim=1] a, mutable array[complex[float[64]], #dim=3] b, const array[complex[float[64]], 2, 2] c) -> int[8] {}
reference: |
  program
    header
    globalStatement
      subroutineDefinition
        def
        test_array_1
        (
        anyTypeArgumentList
          anyTypeArgument
            classicalArgument
              mutable
              arrayReferenceType
                array
                [
                nonArrayType
                  singleDesignatorType
                    uint
                    designator
                      [
                      expression
                        expressionTerminator
                          16
                      ]
                ,
                arrayReferenceTypeDimensionSpecifier
                  expressionList
                    expression
                      expressionTerminator
                        4
                    ,
                    expression
                      expressionTerminator
                        2
                ]
              a
        )
        subroutineBlock
          {
          }
    globalStatement
      subroutineDefinition
        def
        test_array_2
        (
        anyTypeArgumentList
          anyTypeArgument
            classicalArgument
              const
              arrayReferenceType
                array
                [
                nonArrayType
                  singleDesignatorType
                    uint
                    designator
                      [
                      expression
                        expressionTerminator
                          16
                      ]
                ,
                arrayReferenceTypeDimensionSpecifier
                  expressionList
                    expression
                      expressionTerminator
                        4
                    ,
                    expression
                      expressionTerminator
                        2
                ]
              a
        )
        subroutineBlock
          {
          }
    globalStatement
      subroutineDefinition
        def
        test_array_3
        (
        anyTypeArgumentList
          anyTypeArgument
            classicalArgument
              mutable
              arrayReferenceType
                array
                [
                nonArrayType
                  singleDesignatorType
                    uint
                    designator
                      [
                      expression
                        expressionTerminator
                          16
                      ]
                ,
                arrayReferenceTypeDimensionSpecifier
                  #dim
                  =
                  expression
                    expressionTerminator
                      2
                ]
              a
        )
        subroutineBlock
          {
          }
    globalStatement
      subroutineDefinition
        def
        test_array_4
        (
        anyTypeArgumentList
          anyTypeArgument
            classicalArgument
              const
              arrayReferenceType
                array
                [
                nonArrayType
                  singleDesignatorType
                    uint
                    designator
                      [
                      expression
                        expressionTerminator
                          16
                      ]
                ,
                arrayReferenceTypeDimensionSpecifier
                  #dim
                  =
                  expression
                    logicalAndExpression
                      bitOrExpression
                        xOrExpression
                          bitAndExpression
                            equalityExpression
                              comparisonExpression
                                bitShiftExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      multiplicativeExpression
                                        unaryExpression
                                          powerExpression
                                            indexExpression
                                              expressionTerminator
                                                2
                                      *
                                      unaryExpression
                                        powerExpression
                                          indexExpression
                                            expressionTerminator
                                              n
                ]
              a
        )
        subroutineBlock
          {
          }
    globalStatement
      subroutineDefinition
        def
        test_array_5
        (
        anyTypeArgumentList
          anyTypeArgument
            classicalArgument
              const
              arrayReferenceType
                array
                [
                nonArrayType
                  singleDesignatorType
                    int
                    designator
                      [
                      expression
                        expressionTerminator
                          8
                      ]
                ,
                arrayReferenceTypeDimensionSpecifier
                  #dim
                  =
                  expression
                    expressionTerminator
                      1
                ]
              a
          ,
          anyTypeArgument
            classicalArgument
              mutable
              arrayReferenceType
                array
                [
                nonArrayType
                  complex
                  [
                  numericType
                    singleDesignatorType
                      float
                      designator
                        [
                        expression
                          expressionTerminator
                            64
                        ]
                  ]
                ,
                arrayReferenceTypeDimensionSpecifier
                  #dim
                  =
                  expression
                    expressionTerminator
                      3
                ]
              b
          ,
          anyTypeArgument
            classicalArgument
              const
              arrayReferenceType
                array
                [
                nonArrayType
                  complex
                  [
                  numericType
                    singleDesignatorType
                      float
                      designator
                        [
                        expression
                          expressionTerminator
                            64
                        ]
                  ]
                ,
                arrayReferenceTypeDimensionSpecifier
                  expressionList
                    expression
                      expressionTerminator
                        2
                    ,
                    expression
                      expressionTerminator
                        2
                ]
              c
        )
        returnSignature
          ->
          classicalType
            nonArrayType
              singleDesignatorType
                int
                designator
                  [
                  expression
                    expressionTerminator
                      8
                  ]
        subroutineBlock
          {
          }
