# indent w/ 2 spaces
source: |
  array[uint[16], 1] x;
  array[int[8], 4] x;
  array[float[64], 4, 2] x;
  array[angle[32], 4, 3, 2] x;
  array[bit[8], 2] x;
  array[creg[16], 2, 2] x;
  array[complex[float[32]], 4] x;
  array[bool, 3] x;
  array[int[8], 4] x = {1, 2, 3, 4};
  array[int[8], 4] x = y;
  array[int[8], 2] x = {y, y+y};
  array[uint[32], 2, 2] x = {{3, 4}, {2-3, 5*y}};
  array[uint[32], 2, 2] x = {z, {2-3, 5*y}};
  array[uint[32], 2, 2] x = {2*z, {1, 2}};
  array[uint[32], 2, 2] x = y;
reference: |
  program
    header
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  uint
                designator
                  [
                  expression
                    expressionTerminator
                      16
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    1
              ]
            x
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  int
                designator
                  [
                  expression
                    expressionTerminator
                      8
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    4
              ]
            x
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  float
                designator
                  [
                  expression
                    expressionTerminator
                      64
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    4
                ,
                expression
                  expressionTerminator
                    2
              ]
            x
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  angle
                designator
                  [
                  expression
                    expressionTerminator
                      32
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    4
                ,
                expression
                  expressionTerminator
                    3
                ,
                expression
                  expressionTerminator
                    2
              ]
            x
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                bitType
                  bit
                designator
                  [
                  expression
                    expressionTerminator
                      8
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    2
              ]
            x
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                bitType
                  creg
                designator
                  [
                  expression
                    expressionTerminator
                      16
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    2
                ,
                expression
                  expressionTerminator
                    2
              ]
            x
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                complex
                [
                numericType
                  singleDesignatorType
                    float
                  designator
                    [
                    expression
                      expressionTerminator
                        32
                    ]
                ]
              ,
              expressionList
                expression
                  expressionTerminator
                    4
              ]
            x
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                noDesignatorType
                  bool
              ,
              expressionList
                expression
                  expressionTerminator
                    3
              ]
            x
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  int
                designator
                  [
                  expression
                    expressionTerminator
                      8
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    4
              ]
            x
            =
            arrayInitializer
              {
              expression
                expressionTerminator
                  1
              ,
              expression
                expressionTerminator
                  2
              ,
              expression
                expressionTerminator
                  3
              ,
              expression
                expressionTerminator
                  4
              }
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  int
                designator
                  [
                  expression
                    expressionTerminator
                      8
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    4
              ]
            x
            =
            expression
              expressionTerminator
                y
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  int
                designator
                  [
                  expression
                    expressionTerminator
                      8
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    2
              ]
            x
            =
            arrayInitializer
              {
              expression
                expressionTerminator
                  y
              ,
              expression
                logicalAndExpression
                  bitOrExpression
                    xOrExpression
                      bitAndExpression
                        equalityExpression
                          comparisonExpression
                            bitShiftExpression
                              additiveExpression
                                additiveExpression
                                  multiplicativeExpression
                                    unaryExpression
                                      powerExpression
                                        indexExpression
                                          expressionTerminator
                                            y
                                +
                                multiplicativeExpression
                                  unaryExpression
                                    powerExpression
                                      indexExpression
                                        expressionTerminator
                                          y
              }
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  uint
                designator
                  [
                  expression
                    expressionTerminator
                      32
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    2
                ,
                expression
                  expressionTerminator
                    2
              ]
            x
            =
            arrayInitializer
              {
              arrayInitializer
                {
                expression
                  expressionTerminator
                    3
                ,
                expression
                  expressionTerminator
                    4
                }
              ,
              arrayInitializer
                {
                expression
                  logicalAndExpression
                    bitOrExpression
                      xOrExpression
                        bitAndExpression
                          equalityExpression
                            comparisonExpression
                              bitShiftExpression
                                additiveExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      unaryExpression
                                        powerExpression
                                          indexExpression
                                            expressionTerminator
                                              2
                                  -
                                  multiplicativeExpression
                                    unaryExpression
                                      powerExpression
                                        indexExpression
                                          expressionTerminator
                                            3
                ,
                expression
                  logicalAndExpression
                    bitOrExpression
                      xOrExpression
                        bitAndExpression
                          equalityExpression
                            comparisonExpression
                              bitShiftExpression
                                additiveExpression
                                  multiplicativeExpression
                                    multiplicativeExpression
                                      unaryExpression
                                        powerExpression
                                          indexExpression
                                            expressionTerminator
                                              5
                                    *
                                    unaryExpression
                                      powerExpression
                                        indexExpression
                                          expressionTerminator
                                            y
                }
              }
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  uint
                designator
                  [
                  expression
                    expressionTerminator
                      32
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    2
                ,
                expression
                  expressionTerminator
                    2
              ]
            x
            =
            arrayInitializer
              {
              expression
                expressionTerminator
                  z
              ,
              arrayInitializer
                {
                expression
                  logicalAndExpression
                    bitOrExpression
                      xOrExpression
                        bitAndExpression
                          equalityExpression
                            comparisonExpression
                              bitShiftExpression
                                additiveExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      unaryExpression
                                        powerExpression
                                          indexExpression
                                            expressionTerminator
                                              2
                                  -
                                  multiplicativeExpression
                                    unaryExpression
                                      powerExpression
                                        indexExpression
                                          expressionTerminator
                                            3
                ,
                expression
                  logicalAndExpression
                    bitOrExpression
                      xOrExpression
                        bitAndExpression
                          equalityExpression
                            comparisonExpression
                              bitShiftExpression
                                additiveExpression
                                  multiplicativeExpression
                                    multiplicativeExpression
                                      unaryExpression
                                        powerExpression
                                          indexExpression
                                            expressionTerminator
                                              5
                                    *
                                    unaryExpression
                                      powerExpression
                                        indexExpression
                                          expressionTerminator
                                            y
                }
              }
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  uint
                designator
                  [
                  expression
                    expressionTerminator
                      32
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    2
                ,
                expression
                  expressionTerminator
                    2
              ]
            x
            =
            arrayInitializer
              {
              expression
                logicalAndExpression
                  bitOrExpression
                    xOrExpression
                      bitAndExpression
                        equalityExpression
                          comparisonExpression
                            bitShiftExpression
                              additiveExpression
                                multiplicativeExpression
                                  multiplicativeExpression
                                    unaryExpression
                                      powerExpression
                                        indexExpression
                                          expressionTerminator
                                            2
                                  *
                                  unaryExpression
                                    powerExpression
                                      indexExpression
                                        expressionTerminator
                                          z
              ,
              arrayInitializer
                {
                expression
                  expressionTerminator
                    1
                ,
                expression
                  expressionTerminator
                    2
                }
              }
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          arrayDeclaration
            arrayType
              array
              [
              nonArrayType
                singleDesignatorType
                  uint
                designator
                  [
                  expression
                    expressionTerminator
                      32
                  ]
              ,
              expressionList
                expression
                  expressionTerminator
                    2
                ,
                expression
                  expressionTerminator
                    2
              ]
            x
            =
            expression
              expressionTerminator
                y
        ;
