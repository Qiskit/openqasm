# indent w/ 2 spaces
source: |
  if(spec[i] == 0 && spec[n+i] == 1) {
    x q[i];
  }
reference: |
  program
    header
    statement
      branchingStatement
        if
        (
        expression
          logicalAndExpression
            logicalAndExpression
              bitOrExpression
                xOrExpression
                  bitAndExpression
                    equalityExpression
                      equalityExpression
                        comparisonExpression
                          bitShiftExpression
                            additiveExpression
                              multiplicativeExpression
                                unaryExpression
                                  powerExpression
                                    indexExpression
                                      indexExpression
                                        expressionTerminator
                                          spec
                                      indexOperator
                                        [
                                        expression
                                          expressionTerminator
                                            i
                                        ]
                      ==
                      comparisonExpression
                        bitShiftExpression
                          additiveExpression
                            multiplicativeExpression
                              unaryExpression
                                powerExpression
                                  indexExpression
                                    expressionTerminator
                                      0
            &&
            bitOrExpression
              xOrExpression
                bitAndExpression
                  equalityExpression
                    equalityExpression
                      comparisonExpression
                        bitShiftExpression
                          additiveExpression
                            multiplicativeExpression
                              unaryExpression
                                powerExpression
                                  indexExpression
                                    indexExpression
                                      expressionTerminator
                                        spec
                                    indexOperator
                                      [
                                      expression
                                        logicalAndExpression
                                          bitOrExpression
                                            xOrExpression
                                              bitAndExpression
                                                equalityExpression
                                                  comparisonExpression
                                                    bitShiftExpression
                                                      additiveExpression
                                                        additiveExpression
                                                          multiplicativeExpression
                                                            unaryExpression
                                                              powerExpression
                                                                indexExpression
                                                                  expressionTerminator
                                                                    n
                                                        +
                                                        multiplicativeExpression
                                                          unaryExpression
                                                            powerExpression
                                                              indexExpression
                                                                expressionTerminator
                                                                  i
                                      ]
                    ==
                    comparisonExpression
                      bitShiftExpression
                        additiveExpression
                          multiplicativeExpression
                            unaryExpression
                              powerExpression
                                indexExpression
                                  expressionTerminator
                                    1
        )
        programBlock
          {
          statement
            quantumStatement
              quantumInstruction
                quantumGateCall
                  quantumGateName
                    x
                  indexedIdentifier
                    q
                    indexOperator
                      [
                      expression
                        expressionTerminator
                          i
                      ]
              ;
          }
