# indent w/ 2 spaces
source: |
  bit[2] a;
  creg b[2];
  qubit[3] q;
  int[10] x = 12;
  a[0] = b[1];
  x += int[10](a[1]);
  measure q[1] -> a[0];
  a = measure q[1:2];
  b = a == 0;
reference: |
  program
    header
    statement
      classicalDeclarationStatement
        classicalDeclaration
          bitDeclaration
            bit
            designator
              [
              expression
                expressionTerminator
                  2
              ]
            a
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          bitDeclaration
            creg
            b
            designator
              [
              expression
                expressionTerminator
                  2
              ]
        ;
    globalStatement
      quantumDeclarationStatement
        quantumDeclaration
          qubit
          designator
            [
            expression
              expressionTerminator
                3
            ]
          q
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          singleDesignatorDeclaration
            singleDesignatorType
              int
              designator
                [
                expression
                  expressionTerminator
                    10
                ]
            x
            equalsExpression
              =
              expression
                expressionTerminator
                  12
        ;
    statement
      assignmentStatement
        classicalAssignment
          indexedIdentifier
            a
            indexOperator
              [
              expression
                expressionTerminator
                  0
              ]
          assignmentOperator
            =
          expression
            unaryExpression
              powerExpression
                indexExpression
                  indexExpression
                    expressionTerminator
                      b
                  indexOperator
                    [
                    expression
                      expressionTerminator
                        1
                    ]
        ;
    statement
      assignmentStatement
        classicalAssignment
          indexedIdentifier
            x
          assignmentOperator
            +=
          expression
            expressionTerminator
              builtInCall
                castOperator
                  classicalType
                    nonArrayType
                      singleDesignatorType
                        int
                        designator
                          [
                          expression
                            expressionTerminator
                              10
                          ]
                (
                expressionList
                  expression
                    unaryExpression
                      powerExpression
                        indexExpression
                          indexExpression
                            expressionTerminator
                              a
                          indexOperator
                            [
                            expression
                              expressionTerminator
                                1
                            ]
                )
        ;
    statement
      assignmentStatement
        quantumMeasurementAssignment
          quantumMeasurement
            measure
            indexedIdentifier
              q
              indexOperator
                [
                expression
                  expressionTerminator
                    1
                ]
          ->
          indexedIdentifier
            a
            indexOperator
              [
              expression
                expressionTerminator
                  0
              ]
        ;
    statement
      assignmentStatement
        quantumMeasurementAssignment
          indexedIdentifier
            a
          =
          quantumMeasurement
            measure
            indexedIdentifier
              q
              indexOperator
                [
                rangeDefinition
                  expression
                    expressionTerminator
                      1
                  :
                  expression
                    expressionTerminator
                      2
                ]
        ;
    statement
      assignmentStatement
        classicalAssignment
          indexedIdentifier
            b
          assignmentOperator
            =
          expression
            logicalAndExpression
              bitOrExpression
                xOrExpression
                  bitAndExpression
                    equalityExpression
                      equalityExpression
                        comparisonExpression
                          bitShiftExpression
                            additiveExpression
                              multiplicativeExpression
                                unaryExpression
                                  powerExpression
                                    indexExpression
                                      expressionTerminator
                                        a
                      ==
                      comparisonExpression
                        bitShiftExpression
                          additiveExpression
                            multiplicativeExpression
                              unaryExpression
                                powerExpression
                                  indexExpression
                                    expressionTerminator
                                      0
        ;
