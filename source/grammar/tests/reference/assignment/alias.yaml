# indent w/ 2 spaces
source: |
  bit[2] a;
  creg b[2];
  qubit[5] q1;
  qreg q2[7];
  let q = q1 ++ q2;
  let c = a[{0,1}] ++ b[1:2];
  let qq = q1[{1,3,4}];
  let qqq = qq ++ q2[1:2:6];
  let d = c;
  let e = d[1];
reference: |
  program
    header
    statement
      classicalDeclarationStatement
        classicalDeclaration
          bitDeclaration
            bit
            designator
              [
              expression
                expressionTerminator
                  2
              ]
            a
        ;
    statement
      classicalDeclarationStatement
        classicalDeclaration
          bitDeclaration
            creg
            b
            designator
              [
              expression
                expressionTerminator
                  2
              ]
        ;
    globalStatement
      quantumDeclarationStatement
        quantumDeclaration
          qubit
          designator
            [
            expression
              expressionTerminator
                5
            ]
          q1
        ;
    globalStatement
      quantumDeclarationStatement
        quantumDeclaration
          qreg
          q2
          designator
            [
            expression
              expressionTerminator
                7
            ]
        ;
    statement
      aliasStatement
        let
        q
        =
        aliasInitializer
          expression
            expressionTerminator
              q1
          ++
          expression
            expressionTerminator
              q2
        ;
    statement
      aliasStatement
        let
        c
        =
        aliasInitializer
          expression
            unaryExpression
              powerExpression
                indexExpression
                  indexExpression
                    expressionTerminator
                      a
                  indexOperator
                    [
                    discreteSet
                      {
                      expression
                        expressionTerminator
                          0
                      ,
                      expression
                        expressionTerminator
                          1
                      }
                    ]
          ++
          expression
            unaryExpression
              powerExpression
                indexExpression
                  indexExpression
                    expressionTerminator
                      b
                  indexOperator
                    [
                    rangeDefinition
                      expression
                        expressionTerminator
                          1
                      :
                      expression
                        expressionTerminator
                          2
                    ]
        ;
    statement
      aliasStatement
        let
        qq
        =
        aliasInitializer
          expression
            unaryExpression
              powerExpression
                indexExpression
                  indexExpression
                    expressionTerminator
                      q1
                  indexOperator
                    [
                    discreteSet
                      {
                      expression
                        expressionTerminator
                          1
                      ,
                      expression
                        expressionTerminator
                          3
                      ,
                      expression
                        expressionTerminator
                          4
                      }
                    ]
        ;
    statement
      aliasStatement
        let
        qqq
        =
        aliasInitializer
          expression
            expressionTerminator
              qq
          ++
          expression
            unaryExpression
              powerExpression
                indexExpression
                  indexExpression
                    expressionTerminator
                      q2
                  indexOperator
                    [
                    rangeDefinition
                      expression
                        expressionTerminator
                          1
                      :
                      expression
                        expressionTerminator
                          2
                      :
                      expression
                        expressionTerminator
                          6
                    ]
        ;
    statement
      aliasStatement
        let
        d
        =
        aliasInitializer
          expression
            expressionTerminator
              c
        ;
    statement
      aliasStatement
        let
        e
        =
        aliasInitializer
          expression
            unaryExpression
              powerExpression
                indexExpression
                  indexExpression
                    expressionTerminator
                      d
                  indexOperator
                    [
                    expression
                      expressionTerminator
                        1
                    ]
        ;
